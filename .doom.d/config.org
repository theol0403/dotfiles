:DOC-CONFIG:
# Tangle by default to config.el, which is the most common case
#+property: header-args:emacs-lisp :tangle config.el
#+property: header-args :mkdirp yes :comments no
#+startup: fold
:END:

#+title: Doom Emacs Config
#+author: Theo Lemay

This is my doom emacs config. It uses literate programming to interweave code and text.

* Setup
#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).
#+end_src

#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.

;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;;(package! another-package
;;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;;(package! this-package
;;  :recipe (:host github :repo "username/repo"
;;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;;(package! builtin-package :recipe (:nonrecursive t))
;;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;;(package! builtin-package :pin "1a2b3c4d5e")

;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;;(unpin! pinned-package)
;; ...or multiple packages
;;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;;(unpin! t)
#+end_src

#+begin_src emacs-lisp :tangle config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
;; (setq user-full-name "John Doe"
;;      user-mail-address "john@doe.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-one)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
;; (setq org-directory "~/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
;; (setq display-line-numbers-type t)

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src

* General
** Doom modules

This code is written to the =init.el= to select which modules to load. Written here as-is for now, as it is quite well structured and clear.

#+begin_src emacs-lisp :tangle init.el
(doom! :input
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       (company +childframe +tng)             ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       (vertico +icons)    ; the search engine of the future

       :ui
       ;;deft              ; notational velocity for Emacs
       doom                ; what makes DOOM look the way it does
       doom-dashboard      ; a nifty splash screen for Emacs
       ;; doom-quit        ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode)  ; ðŸ™‚
       ;; hl-todo          ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       hydra
       indent-guides     ; highlighted indent columns
       ligatures           ; ligatures and symbols to make your code pretty again
       minimap           ; show a map of the code on the side
       modeline            ; snazzy, Atom-inspired modeline, plus API
       nav-flash           ; blink cursor line after big motions
       ;; neotree             ; a project drawer, like NERDTree for vim
       ophints             ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       tabs                ; a tab bar for Emacs
       (treemacs +lsp)     ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       (vc-gutter +pretty)           ; vcs diff in the fringe
       vi-tilde-fringe     ; fringe tildes to mark beyond EOB
       window-select       ; visually switch windows
       workspaces          ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere)  ; come to the dark side, we have cookies
       file-templates      ; auto-snippets for empty files
       fold                ; (nigh) universal code folding
       (format +onsave)    ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       multiple-cursors    ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets            ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired +icons)      ; making dired pretty [functional]
       electric            ; smarter, keyword-based electric-indent
       (ibuffer +icons)    ; interactive buffer management
       undo                ; persistent, smarter undo for your inevitable mistakes
       vc                  ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm               ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;;(spell +flyspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       (lsp +peek)         ; M-x vscode
       magit               ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       tty                 ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       (cc +lsp)           ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       (dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       (emacs-lisp +lsp)   ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;; ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json                ; At least it ain't XML
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       latex               ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       lua                 ; one-based indices? one-based indices
       markdown            ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       org                 ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       python              ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       (rust +lsp)         ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                  ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes
       yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       literate
       (default +bindings +smartparens))
#+end_src

** General Configuration
#+begin_src emacs-lisp
(setq
 ;; doom settings
 user-full-name "Theo Lemay"
 user-mail-address "theol0403"

 ;; doom settings
 doom-theme 'doom-monokai-pro
 doom-font (font-spec :family "JetBrains Mono" :size 12 :weight 'semi-light)
 doom-variable-pitch-font (font-spec :family "DejaVu Sans" :size 12 :weight 'semi-light)
 display-line-numbers-type 'relative

 read-process-output-max (* 1024 1024)
 delete-by-moving-to-trash t ; Delete files to trash
 window-combination-resize t ; take new window space from all other windows (not just current
 auto-save-default t
 make-backup-files t

 history-length 200

 git-gutter:update-interval 2
 git-gutter:ask-p nil

 +zen-text-scale 1

 org-directory "~/Documents/github/org-notes/"
 truncate-string-ellipsis "â€¦"
 treemacs-width 36
 centaur-tabs-gray-out-icons nil

 yas-triggers-in-field t

 calc-angle-mode 'rad  ; radians are rad
 calc-symbolic-mode t
 )

(add-to-list 'default-frame-alist '(fullscreen . maximized))
(add-to-list 'default-frame-alist '(select-frame-set-input-focus (selected-frame)))
#+end_src
* Modes
** Other
*** Format
#+begin_src emacs-lisp
(after! format-all  (setq +format-on-save-enabled-modes '(not sql-mode)))
#+end_src
*** Projectile
#+begin_src emacs-lisp
;; projectile
(setq
 projectile-project-search-path    '("~/Documents/github")
 counsel-projectile-sort-projects  t
 counsel-projectile-sort-files     t
 counsel-projectile-sort-directory t
 counsel-projectile-sort-buffers   t)
#+end_src
*** LSP
#+begin_src emacs-lisp :tangle packages.el
(package! company-tabnine)
(package! tree-sitter)
(package! tree-sitter-langs)
#+end_src
#+begin_src emacs-lisp

(after! lsp-clangd
  (setq lsp-clients-clangd-args
        '("--all-scopes-completion"
          "--background-index"
          "--clang-tidy"
          "--completion-style=bundled"
          "--header-insertion=iwyu"
          "--header-insertion-decorators"
          "--suggest-missing-includes"
          "--pch-storage=memory"
          ;; "--limit-results=10"
          "-j=8"
          "--cross-file-rename"
          "--ranking-model=decision_forest")
        lsp-semantic-tokens-enable t
        ;; lsp-semantic-tokens-warn-on-missing-face t
        lsp-semantic-tokens-apply-modifiers t
        lsp-headerline-breadcrumb-enable t
        lsp-headerline-breadcrumb-enable-diagnostics t
        lsp-auto-guess-root t
        lsp-lens-enable t
        lsp-lens-debounce-interval 0.3
        )
  (set-lsp-priority! 'clangd 2))

(setq rustic-lsp-server 'rust-analyzer)

(after! rustic
  (setq lsp-rust-server 'rust-analyzer))

(after! lsp-rust
  (setq lsp-rust-server 'rust-analyzer))

(use-package! tree-sitter
  :config
  (require 'tree-sitter-langs)
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

(after! company
  (setq
   company-idle-delay 0.01
   company-minimum-prefix-length 1
   company-show-numbers t
   company-backends '((company-tabnine :separate company-capf company-yasnippet))
   +lsp-company-backends '(company-tabnine :separate company-capf company-yasnippet)
   ;; +company-backend-alist '((org-mode company-tabnine company-capf)
   ;;                          (text-mode (:separate company-tabnine company-dabbrev company-yasnippet company-ispell))
   ;;                          (prog-mode company-tabnine company-capf company-yasnippet)
   ;;                          (conf-mode company-tabnine company-capf company-dabbrev-code company-yasnippet))
   )
  (add-hook 'evil-normal-state-entry-hook #'company-abort)
  )

;; (use-package corfu
;;   ;; TAB-and-Go customizations
;;   :custom
;;   (corfu-cycle t)             ;; Enable cycling for `corfu-next/previous'
;;   (corfu-auto t)
;;   (corfu-preselect-first nil) ;; Disable candidate preselection

;;   ;; Use TAB for cycling, default is `corfu-complete'.
;;   :bind
;;   (:map corfu-map
;;         ("TAB" . corfu-next)
;;         ([tab] . corfu-next)
;;         ("S-TAB" . corfu-previous)
;;         ([backtab] . corfu-previous))

;;   :init
;;   (corfu-global-mode))

;; (after! company-tng
;; (setq company-require-match nil
;;     company-clang-insert-arguments t
;;     company-semantic-insert-arguments t
;;     company-rtags-insert-arguments t
;;     lsp-enable-snippet t))

(after! company-tabnine
  (setq company-tabnine-max-num-results 3
        company-tabnine-always-trigger t))
#+end_src

#+RESULTS:

*** Faces
#+begin_src emacs-lisp
;; (after! doom-themes
;;   (custom-set-faces!
;;     `(line-number :foreground ,(doom-color 'base4))
;;     ;; `(line-number :foreground "#5b595c")
;;     `(line-number-current-line :foreground "#c1c0c0")
;;     `(hl-line :background "#373538")
;;     `(treemacs-file-face :foreground ,(doom-color 'white))
;;     `(org-block :background ,(doom-color 'bg))
;;     `(org-block-begin-line :background ,(doom-color 'bg))
;;     `(org-block-end-line :background ,(doom-color 'bg))
;;     `(vertical-border :background "#221F22" :foreground "#221F22")
;;     `(eldoc-box-body :background "#423f42")
;;     `(font-lock-doc-face :foreground ,(doom-color 'grey))
;;     `(lsp-face-semhl-parameter :slant italic :foreground ,(doom-color 'orange))
;;     `(highlight-numbers-number :bold nil)
;;     ))
#+end_src
*** Smooth Scroll
#+begin_src emacs-lisp :tangle packages.el
(package! scroll-on-jump)
#+end_src

#+begin_src emacs-lisp
(use-package scroll-on-jump
  :config
  (setq scroll-on-jump-duration 0.2))

(after! evil
  (scroll-on-jump-advice-add evil-undo)
  (scroll-on-jump-advice-add evil-redo)
  (scroll-on-jump-advice-add evil-jump-item)
  (scroll-on-jump-advice-add evil-jump-forward)
  (scroll-on-jump-advice-add evil-jump-backward)
  (scroll-on-jump-advice-add evil-ex-search-next)
  (scroll-on-jump-advice-add evil-ex-search-previous)
  (scroll-on-jump-advice-add evil-forward-paragraph)
  (scroll-on-jump-advice-add evil-backward-paragraph)
  (scroll-on-jump-advice-add evil-goto-mark)
  (scroll-on-jump-advice-add evil-goto-first-line)

  ;; Actions that themselves scroll.
  (scroll-on-jump-with-scroll-advice-add evil-goto-line)
  (scroll-on-jump-advice-add evil-scroll-down)
  (scroll-on-jump-with-scroll-advice-add evil-scroll-up)
  (scroll-on-jump-with-scroll-advice-add evil-scroll-line-to-center)
  (scroll-on-jump-with-scroll-advice-add evil-scroll-line-to-top)
  (scroll-on-jump-with-scroll-advice-add evil-scroll-line-to-bottom))

(after! goto-chg
  (scroll-on-jump-advice-add goto-last-change)
  (scroll-on-jump-advice-add goto-last-change-reverse))
#+end_src
*** Treemacs
#+begin_src emacs-lisp :tangle packages.el
(package! treemacs-all-the-icons)
#+end_src
#+begin_src emacs-lisp
(use-package! doom-themes
  :init
  (setq doom-themes-neotree-file-icons t)
  (setq doom-themes-treemacs-theme nil
        treemacs-window-background-color '("#221F22" . "#423f42"))
  :config
  (require 'treemacs-all-the-icons)
  (treemacs-load-theme "all-the-icons"))

(after! treemacs
    (treemacs-follow-mode 1)
    (treemacs-git-mode 'deferred)
    (treemacs-filewatch-mode 1))
(after! lsp-treemacs
    (lsp-treemacs-sync-mode 1))
#+end_src
*** Vterm
#+begin_src emacs-lisp
(after! vterm
  (add-hook 'vterm-mode-hook
            (lambda () (face-remap-add-relative 'default '(:background "#423f42")))))
(define-key! vterm-mode-map
  "C-w" nil
  "<C-w>" nil
  )
#+end_src
** Evil Mode
*** Evil
#+begin_src emacs-lisp
(use-package! evil
  :init
  (add-hook 'evil-normal-state-entry-hook (lambda () (setq-local display-line-numbers 'relative)))
  (add-hook 'evil-insert-state-entry-hook (lambda () (setq-local display-line-numbers t)))
  (setq
   evil-respect-visual-line-mode     nil
   evil-split-window-below           t
   evil-vsplit-window-right          t
   ;; evil-want-fine-undo t
   evil-collection-setup-minibuffer  t
   evil-ex-substitute-global t
   )
  (define-key evil-normal-state-map (kbd "C-z") 'evil-undo)

  :config
  ;; make _ part of a word
  (add-hook 'c-mode-common-hook (lambda () (modify-syntax-entry ?_ "w"))))
#+end_src

*** Args
#+begin_src emacs-lisp :tangle packages.el
(package! evil-args)
#+end_src

#+begin_src emacs-lisp
(after! evil
  (define-key evil-inner-text-objects-map "," 'evil-inner-arg)
  (define-key evil-outer-text-objects-map "," 'evil-outer-arg))
#+end_src
*** ReplaceWithRegister
#+begin_src emacs-lisp :tangle packages.el
(package! evil-replace-with-register)
#+end_src
#+begin_src emacs-lisp
;; (after! evil-replace-with-register
;;   (setq evil-replace-with-register-key "yr")
;;   (evil-replace-with-register-install))
#+end_src
*** Little Word
#+begin_src emacs-lisp :tangle packages.el
(package! evil-little-word
  :recipe (:host github :repo "tarao/evil-plugins"
           :files ("evil-little-word.el")))
#+end_src
#+begin_src emacs-lisp
(after! evil-little-word
  ;; (define-key evil-motion-state-map (kbd "w") 'evil-forward-little-word-begin)
  ;; (define-key evil-motion-state-map (kbd "b") 'evil-backward-little-word-begin)
  ;; (define-key evil-motion-state-map (kbd "W") 'evil-forward-little-word-end)
  ;; (define-key evil-motion-state-map (kbd "B") 'evil-backward-little-word-end)
  ;; (define-key evil-visual-state-map (kbd "w") 'evil-forward-little-word-begin)
  ;; (define-key evil-visual-state-map (kbd "b") 'evil-backward-little-word-begin)
  (define-key evil-visual-state-map (kbd "i v") 'evil-inner-little-word)
  (define-key evil-outer-text-objects-map (kbd "v") 'evil-a-little-word)
  (define-key evil-inner-text-objects-map (kbd "v") 'evil-inner-little-word))
#+end_src
*** Snipe
#+begin_src emacs-lisp
(after! evil-snipe
  (setq evil-snipe-scope 'buffer
        evil-snipe-spillover-scope 'whole-buffer
        evil-snipe-repeat-scope 'whole-buffer
        evil-snipe-tab-increment t))
#+end_src
*** Ranger
#+begin_src emacs-lisp
(after! ranger
  (setq ranger-override-dired t
        ranger-hide-cursor nil
        ranger-preview-delay 0.2
        ranger-dont-show-binary t
        ranger-max-preview-size 500
        ranger-cleanup-eagerly t
        ))
#+end_src
*** Which-key
#+begin_src emacs-lisp
(after! which-key
  (setq which-key-idle-delay 0.4))
#+end_src
*** Lion
#+begin_src emacs-lisp
(after! evil-lion (evil-lion-mode))
#+end_src
** Org Mode
#+begin_src emacs-lisp :tangle packages.el
(package! org-pretty-table
  :recipe (:host github :repo "Fuco1/org-pretty-table"))

(package! org-fragtog)
(package! org-appear :recipe (:host github :repo "awth13/org-appear"))
(package! org-pretty-tags)
#+end_src

#+begin_src emacs-lisp
(after! mixed-pitch
(setq mixed-pitch-variable-pitch-cursor nil
      mixed-pitch-set-height t)

(add-hook! org-mode :append #'mixed-pitch-mode)
)

(add-hook 'org-mode-hook
          (lambda () (add-hook 'after-save-hook #'org-babel-tangle
                               :append :local)))

(use-package! org-pretty-table
  :commands (org-pretty-table-mode global-org-pretty-table-mode))

(use-package! info-colors
  :defer t
  :commands (info-colors-fontify-node))

(add-hook 'Info-selection-hook 'info-colors-fontify-node)
#+end_src
** Pending
#+begin_src emacs-lisp :tangle packages.el
;; (package! centered-window-mode
;;   :recipe (:host github :repo "anler/centered-window-mode"
;;            :files ("centered-window.el")))

;; (package! git-gutter :recipe (:host github :repo "theol0403/git-gutter"))
;; (package! git-gutter :recipe (:local-repo "~/Documents/github/git-gutter" :build (:not compile)))

;; (package! solaire-mode :disable t)

(package! aas :recipe (:host github :repo "ymarco/auto-activating-snippets"))
(package! laas :recipe (:local-repo "lisp/LaTeX-auto-activating-snippets"))

;; (unpin! doom-themes)
;; (package! doom-themes :recipe (:host github :repo "theol0403/emacs-doom-themes"))

(package! monokai-pro-theme)

(package! evil-textobj-syntax)

(package! beacon :recipe (:host github :repo "Malabarba/beacon"))

(package! good-scroll)
(package! cdlatex)
(package! auctex)
(package! corfu)

#+end_src

#+RESULTS:
| monokai-pro-theme | :modules | ((:private . packages) (:private . modules) (:private . config) (:private . modules)) |


** LATEX for impacient scholars
#+begin_src emacs-lisp :tangle config.el

;; AucTeX settings - almost no changes
(use-package latex
  :ensure auctex
  :hook ((LaTeX-mode . prettify-symbols-mode))
  :bind (:map LaTeX-mode-map
         ("C-S-e" . latex-math-from-calc))
  :config
  ;; Format math as a Latex string with Calc
  (defun latex-math-from-calc ()
    "Evaluate `calc' on the contents of line at point."
    (interactive)
    (cond ((region-active-p)
           (let* ((beg (region-beginning))
                  (end (region-end))
                  (string (buffer-substring-no-properties beg end)))
             (kill-region beg end)
             (insert (calc-eval `(,string calc-language latex
                                          calc-prefer-frac t
                                          calc-angle-mode rad)))))
          (t (let ((l (thing-at-point 'line)))
               (end-of-line 1) (kill-line 0)
               (insert (calc-eval `(,l
                                    calc-language latex
                                    calc-prefer-frac t
                                    calc-angle-mode rad))))))))

(use-package preview
  :after latex
  :hook ((LaTeX-mode . preview-larger-previews))
  :config
  (defun preview-larger-previews ()
    (setq preview-scale-function
          (lambda () (* 1.25
                   (funcall (preview-scale-from-face)))))))

;; CDLatex settings
(use-package cdlatex
  :ensure t
  :hook (LaTeX-mode . turn-on-cdlatex)
  :bind (:map cdlatex-mode-map
              ("<tab>" . cdlatex-tab)))

;; Yasnippet settings
(use-package yasnippet
  :ensure t
  :hook ((LaTeX-mode . yas-minor-mode)
         (post-self-insert . my/yas-try-expanding-auto-snippets))
  :config
  (use-package warnings
    :config
    (cl-pushnew '(yasnippet backquote-change)
                warning-suppress-types
                :test 'equal))

  (setq yas-triggers-in-field t)

  ;; Function that tries to autoexpand YaSnippets
  ;; The double quoting is NOT a typo!
  (defun my/yas-try-expanding-auto-snippets ()
    (when (and (boundp 'yas-minor-mode) yas-minor-mode)
      (let ((yas-buffer-local-condition ''(require-snippet-condition . auto)))
        (yas-expand)))))

;; CDLatex integration with YaSnippet: Allow cdlatex tab to work inside Yas
;; fields
(use-package cdlatex
  :hook ((cdlatex-tab . yas-expand)
         (cdlatex-tab . cdlatex-in-yas-field))
  :config
  (use-package yasnippet
    :bind (:map yas-keymap
           ("<tab>" . yas-next-field-or-cdlatex)
           ("TAB" . yas-next-field-or-cdlatex))
    :config
    (defun cdlatex-in-yas-field ()
      ;; Check if we're at the end of the Yas field
      (when-let* ((_ (overlayp yas--active-field-overlay))
                  (end (overlay-end yas--active-field-overlay)))
        (if (>= (point) end)
            ;; Call yas-next-field if cdlatex can't expand here
            (let ((s (thing-at-point 'sexp)))
              (unless (and s (assoc (substring-no-properties s)
                                    cdlatex-command-alist-comb))
                (yas-next-field-or-maybe-expand)
                t))
          ;; otherwise expand and jump to the correct location
          (let (cdlatex-tab-hook minp)
            (setq minp
                  (min (save-excursion (cdlatex-tab)
                                       (point))
                       (overlay-end yas--active-field-overlay)))
            (goto-char minp) t))))

    (defun yas-next-field-or-cdlatex nil
      (interactive)
      "Jump to the next Yas field correctly with cdlatex active."
      (if
          (or (bound-and-true-p cdlatex-mode)
              (bound-and-true-p org-cdlatex-mode))
          (cdlatex-tab)
        (yas-next-field-or-maybe-expand)))))

;; Array/tabular input with org-tables and cdlatex
(use-package org-table
  :after cdlatex
  :bind (:map orgtbl-mode-map
              ("<tab>" . lazytab-org-table-next-field-maybe)
              ("TAB" . lazytab-org-table-next-field-maybe))
  :init
  (add-hook 'cdlatex-tab-hook 'lazytab-cdlatex-or-orgtbl-next-field 90)
  ;; Tabular environments using cdlatex
  (add-to-list 'cdlatex-command-alist '("smat" "Insert smallmatrix env"
                                       "\\left( \\begin{smallmatrix} ? \\end{smallmatrix} \\right)"
                                       lazytab-position-cursor-and-edit
                                       nil nil t))
  (add-to-list 'cdlatex-command-alist '("bmat" "Insert bmatrix env"
                                       "\\begin{bmatrix} ? \\end{bmatrix}"
                                       lazytab-position-cursor-and-edit
                                       nil nil t))
  (add-to-list 'cdlatex-command-alist '("pmat" "Insert pmatrix env"
                                       "\\begin{pmatrix} ? \\end{pmatrix}"
                                       lazytab-position-cursor-and-edit
                                       nil nil t))
  (add-to-list 'cdlatex-command-alist '("tbl" "Insert table"
                                        "\\begin{table}\n\\centering ? \\caption{}\n\\end{table}\n"
                                       lazytab-position-cursor-and-edit
                                       nil t nil))
  :config
  ;; Tab handling in org tables
  (defun lazytab-position-cursor-and-edit ()
    ;; (if (search-backward "\?" (- (point) 100) t)
    ;;     (delete-char 1))
    (cdlatex-position-cursor)
    (lazytab-orgtbl-edit))

  (defun lazytab-orgtbl-edit ()
    (advice-add 'orgtbl-ctrl-c-ctrl-c :after #'lazytab-orgtbl-replace)
    (orgtbl-mode 1)
    (open-line 1)
    (insert "\n|"))

  (defun lazytab-orgtbl-replace (_)
    (interactive "P")
    (unless (org-at-table-p) (user-error "Not at a table"))
    (let* ((table (org-table-to-lisp))
           params
           (replacement-table
            (if (texmathp)
                (lazytab-orgtbl-to-amsmath table params)
              (orgtbl-to-latex table params))))
      (kill-region (org-table-begin) (org-table-end))
      (open-line 1)
      (push-mark)
      (insert replacement-table)
      (align-regexp (region-beginning) (region-end) "\\([:space:]*\\)& ")
      (orgtbl-mode -1)
      (advice-remove 'orgtbl-ctrl-c-ctrl-c #'lazytab-orgtbl-replace)))

  (defun lazytab-orgtbl-to-amsmath (table params)
    (orgtbl-to-generic
     table
     (org-combine-plists
      '(:splice t
                :lstart ""
                :lend " \\\\"
                :sep " & "
                :hline nil
                :llend "")
      params)))

  (defun lazytab-cdlatex-or-orgtbl-next-field ()
    (when (and (bound-and-true-p orgtbl-mode)
               (org-table-p)
               (looking-at "[[:space:]]*\\(?:|\\|$\\)")
               (let ((s (thing-at-point 'sexp)))
                 (not (and s (assoc s cdlatex-command-alist-comb)))))
      (call-interactively #'org-table-next-field)
      t))

  (defun lazytab-org-table-next-field-maybe ()
    (interactive)
    (if (bound-and-true-p cdlatex-mode)
        (cdlatex-tab)
      (org-table-next-field))))
#+end_src
